{"ast":null,"code":"import { NetworkConnector } from '@web3-react/network-connector';\nimport { useEffect } from 'react';\nimport { useEthers } from '../hooks';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useConfig } from './config/context';\nexport function NetworkActivator() {\n  const {\n    activate,\n    account,\n    chainId: connectedChainId,\n    active,\n    connector\n  } = useEthers();\n  const {\n    networks,\n    readOnlyChainId,\n    readOnlyUrls,\n    autoConnect\n  } = useConfig();\n  useEffect(() => {\n    const eagerConnect = async () => {\n      const injected = new InjectedConnector({\n        supportedChainIds: (networks === null || networks === void 0 ? void 0 : networks.map(network => network === null || network === void 0 ? void 0 : network.chainId)) || []\n      });\n\n      if (await injected.isAuthorized()) {\n        activate(injected);\n      }\n    };\n\n    autoConnect && eagerConnect();\n  }, []);\n  useEffect(() => {\n    if (readOnlyChainId && readOnlyUrls) {\n      if (!active || connector instanceof NetworkConnector && connectedChainId !== readOnlyChainId) {\n        activate(new NetworkConnector({\n          defaultChainId: readOnlyChainId,\n          urls: readOnlyUrls || []\n        }));\n      }\n    }\n  }, [readOnlyChainId, readOnlyUrls, active, account, connectedChainId, connector]);\n  return null;\n}","map":{"version":3,"sources":["../../../../src/providers/NetworkActivator.tsx"],"names":[],"mappings":"AAAA,SAAS,gBAAT,QAAiC,+BAAjC;AACA,SAAS,SAAT,QAA0B,OAA1B;AACA,SAAS,SAAT,QAA0B,UAA1B;AACA,SAAS,iBAAT,QAAkC,gCAAlC;AACA,SAAS,SAAT,QAA0B,kBAA1B;AAEA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,OAAZ;AAAqB,IAAA,OAAO,EAAE,gBAA9B;AAAgD,IAAA,MAAhD;AAAwD,IAAA;AAAxD,MAAsE,SAAS,EAArF;AACA,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,eAAZ;AAA6B,IAAA,YAA7B;AAA2C,IAAA;AAA3C,MAA2D,SAAS,EAA1E;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,UAAM,YAAY,GAAG,YAAW;AAC9B,YAAM,QAAQ,GAAG,IAAI,iBAAJ,CAAsB;AACrC,QAAA,iBAAiB,EAAE,CAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,GAAV,CAAe,OAAD,IAAa,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,OAApC,CAAA,KAAgD;AAD9B,OAAtB,CAAjB;;AAGA,UAAI,MAAM,QAAQ,CAAC,YAAT,EAAV,EAAmC;AACjC,QAAA,QAAQ,CAAC,QAAD,CAAR;AACD;AACF,KAPD;;AAQA,IAAA,WAAW,IAAI,YAAY,EAA3B;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,eAAe,IAAI,YAAvB,EAAqC;AACnC,UAAI,CAAC,MAAD,IAAY,SAAS,YAAY,gBAArB,IAAyC,gBAAgB,KAAK,eAA9E,EAAgG;AAC9F,QAAA,QAAQ,CAAC,IAAI,gBAAJ,CAAqB;AAAE,UAAA,cAAc,EAAE,eAAlB;AAAmC,UAAA,IAAI,EAAE,YAAY,IAAI;AAAzD,SAArB,CAAD,CAAR;AACD;AACF;AACF,GANQ,EAMN,CAAC,eAAD,EAAkB,YAAlB,EAAgC,MAAhC,EAAwC,OAAxC,EAAiD,gBAAjD,EAAmE,SAAnE,CANM,CAAT;AAQA,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["import { NetworkConnector } from '@web3-react/network-connector';\nimport { useEffect } from 'react';\nimport { useEthers } from '../hooks';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useConfig } from './config/context';\nexport function NetworkActivator() {\n    const { activate, account, chainId: connectedChainId, active, connector } = useEthers();\n    const { networks, readOnlyChainId, readOnlyUrls, autoConnect } = useConfig();\n    useEffect(() => {\n        const eagerConnect = async () => {\n            const injected = new InjectedConnector({\n                supportedChainIds: (networks === null || networks === void 0 ? void 0 : networks.map((network) => network === null || network === void 0 ? void 0 : network.chainId)) || [],\n            });\n            if (await injected.isAuthorized()) {\n                activate(injected);\n            }\n        };\n        autoConnect && eagerConnect();\n    }, []);\n    useEffect(() => {\n        if (readOnlyChainId && readOnlyUrls) {\n            if (!active || (connector instanceof NetworkConnector && connectedChainId !== readOnlyChainId)) {\n                activate(new NetworkConnector({ defaultChainId: readOnlyChainId, urls: readOnlyUrls || [] }));\n            }\n        }\n    }, [readOnlyChainId, readOnlyUrls, active, account, connectedChainId, connector]);\n    return null;\n}\n//# sourceMappingURL=NetworkActivator.js.map"]},"metadata":{},"sourceType":"module"}